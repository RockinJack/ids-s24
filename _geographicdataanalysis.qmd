---
title: "Geographic Data Analysis"
author: "Jack Dennison"
toc: true
number-sections: true
highlight-style: pygments
format: 
  html: 
    code-fold: true
    html-math-method: katex
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
##  docx: default
--- 

This section was written by Jack Dennison. 


 ## Introduction  
 Hello! My name is Jack Dennison and I am a junior dual Applied Data Analysis and Geographic Information 
 systems major. I am interested in the intersection of geography and statistics, so this presentation 
 reflects that. Therefore, I'm going to talk about the various ways that Geographic Data Analysis can be 
 done using python. Some examples of things that will be disussed are `geopy`, `geopandas`, and `arcpy`.

 ## Downloading the Necessary Packages
 In order to download GeoPy, you can simply install it using either Conda or pip commands.
 Using Conda:
 ```bash
 `conda install geopy`
 ```
 Using pip:
 ```bash
 `pip install geopy`
 ```
 
 To install GeoPandas, it's recommended that you first download prerequisite packages, such as NumPy, 
 pandas, shapely, and Fiona. After that, you can use Conda or pip to install GeoPandas.

 Using Conda:
 ```bash
 `conda install numpy pandas shapely Fiona`
 `conda install geopandas`
 ```

 Using pip:
 ```bash
 `pip install numpy pandas shapely Fiona`
 `pip install geopandas`
 ```

 ## GeoPy Overview
 GeoPy is a powerful Python library that provides geocoding capabilities and various geospatial 
 utilities. It allows users to perform various tasks related to geographical information, including 
 geocoding, reverse geocoding, distance calculations, and more.

 ### Geocoding
 GeoPy can be used to geocode, which is to turn addresses into locations on the coordinate system plane. 
 For example, take an address from the Rodent Data Spreadsheet.

 * 265 Putnam Avenue, Brooklyn, New York

 Using the Nominatim encoder from OpenStreetMap, we can geocode to find the lattitude and longitude of 
 this address. Before going through with this, it should be noted that the rodent data file does give
 the latitude and longitude of every rodent incident, so this will be used to check work. The coordinates
 given by the data are as follows: (40.683855196486164, -73.95164557951071). Let's see if we can 
 replicate this with geopy.

 ```{python}
 from geopy.geocoders import Nominatim

# Initialize the Nominatim geocoder
geolocator = Nominatim(user_agent="GeoCoding")

# Address to be geocoded
address = "265 Putnam Avenue, Brooklyn, NY"

try:
    # Perform geocoding
    location = geolocator.geocode(address)

    if location:
        # Print the results
        print("Address:", address)
        print("Latitude:", location.latitude)
        print("Longitude:", location.longitude)
    else:
        print("Location not found.")
except Exception as e:
    print("Error:", e)
```
 And the output is as follows:
Address: 265 Putnam Avenue, Brooklyn, NY
Latitude: 40.68404835
Longitude: -73.95149699550375

 This is remarkably similar to the coordinates given by the rodent data file, meaning that we can 
 confirm that that data is accurate.

 ### Reverse Geocoding
 Similarly to how we can use GeoPy to geocode a coordinate based off of an address, we can also do this
 in reverse: take an address from a lattitude and longitude. Let's again take two coordinates from the
 rodent data:

 * (40.77924175816874, -73.95368859796383)

With this code, the latitude is the first number and the longitude is the second number.  This latitude,
according to the spreadsheet, gives the address 1538 Third Avenue, Manhattan, New York. Let's 
reverse-geocode to find if the address of these coordinates is accurate.
 ```{python}
 from geopy.geocoders import Nominatim

# Initialize the Nominatim geocoder
geolocator = Nominatim(user_agent="ReverseGeoCoding")

# Coordinates to be reverse geocoded (latitude and longitude)
latitude = 40.77924175816874
longitude = -73.95368859796383

try:
    # Perform reverse geocoding
    location = geolocator.reverse((latitude, longitude), exactly_one=True)

    if location:
        # Print the results
        print("Latitude:", latitude)
        print("Longitude:", longitude)
        print("Address:", location.address)
    else:
        print("Location not found.")
except Exception as e:
    print("Error:", e)
```
 And here is the output:
 Latitude: 40.77924175816874
 Longitude: -73.95368859796383
 Address: 1538, 3rd Avenue, Carnegie Hill, Manhattan, New York County, City of New York, New York, 
 10028, United States

 This matches up exactly with the address that is given in the spreadsheet. This demonstrates how useful
 reverse geo-coding can be with Python and GeoPy.

 ### Distance Mapping
 Geopy can also be used to map distances between locations. To exemplify this, let's use the two 
 coordinates from the previous two examples. We will be calculating the distance using the Haversine 
 formula, which is a method to compute distances between two points on a sphere.

 ```{python}
from geopy.distance import distance

# Coordinates of two points (latitude and longitude)
point1 = (40.683855196486164, -73.95164557951071)  # Point from geocoding example
point2 = (40.77924175816874, -73.95368859796383)  # Point from reverse geocoding example

# Calculate the distance between the two points using the Haversine formula
distance_haversine = distance(point1, point2).miles  # You can also use kilometers by calling .kilometers

# Print the result
print("Distance between New York City and Los Angeles (Haversine formula): {:.2f} miles".format(distance_haversine))
```
 Here is the output: 
 Distance between New York City and Los Angeles (Haversine formula): 6.58 miles

 This is an effective method to look at the distance between two points on earth. While the two locations
 in New York are rather close to each other, this method works regardless of the locations of the points.

 ### Other features